import { processTest, populateTransaction } from "../test.fixture";

const contractName = "SquidRouterProxy";

const testLabel = "ethereum_bridgeCall_normal_flow";
const testDirSuffix = "bridgeCall_normal_flow";
const testNetwork = "ethereum";
const signedPlugin = false;

const contractAddr = "0xce16f69375520ab01377ce7b88f5ba8c48f8d666";   // <= Address of the smart contract
const chainID = 1;

// From : https://etherscan.io/tx/0xad963db1ba6de1b6ffccf66775212fd76881c18993c09d3dfa7e49271c29c633
const inputData = "0x2147796000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000019b3b3108c0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000df6ecbe0da0bb7b3cd1315bcacfba4c0a77fb17c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004555344540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046b61766100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078636531364636393337353532306162303133373763653742383866354241384334384638443636360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000df6ecbe0da0bb7b3cd1315bcacfba4c0a77fb17c00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000007f5373ae26c3e8ffc4c77b7255df7ec1a9af52a600000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5373ae26c3e8ffc4c77b7255df7ec1a9af52a6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000cbf451d41f2ba5b0d169740fd01293dcaf9becb900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000007f5373ae26c3e8ffc4c77b7255df7ec1a9af52a600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000cbf451d41f2ba5b0d169740fd01293dcaf9becb9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000003840651cb350000000000000000000000007f5373ae26c3e8ffc4c77b7255df7ec1a9af52a6000000000000000000000000aa3b055186f96dd29d0c2a17710d280bc54290c7000000000000000000000000919c1c267bc06a7039e03fcc2ef738525769109cb3b3108c00000000000000000000000000000000000000000000000000000019a29b89d40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000df6ecbe0da0bb7b3cd1315bcacfba4c0a77fb17c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000007f5373ae26c3e8ffc4c77b7255df7ec1a9af52a60000000000000000000000000000000000000000000000000000000000000015";

// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 5, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 5, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 5, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
